{"ast":null,"code":"let game = {\n  lockMode: false,\n  firstCard: null,\n  secondCard: null,\n  techs: ['bootstrap', 'css', 'electron', 'firebase', 'html', 'javascript', 'jquery', 'mongo', 'node', 'react'],\n  cards: null,\n  setCard: function (id) {\n    let card = this.cards.filter(card => card.id === id)[0];\n    console.log(card);\n\n    if (card.flipped || this.lockMode) {\n      return false;\n    }\n\n    if (!this.firstCard) {\n      this.firstCard = card;\n      this.firstCard.flipped = true;\n      return true;\n    } else {\n      this.secondCard = card;\n      this.secondCard.flipped = true;\n      this.lockMode = true;\n      return true;\n    }\n  },\n  checkMatch: function () {\n    if (!this.firstCard || !this.secondCard) {\n      return false;\n    }\n\n    return this.firstCard.icon === this.secondCard.icon;\n  },\n  clearCards: function () {\n    this.firstCard = null;\n    this.secondCard = null;\n    this.lockMode = false;\n  },\n\n  unflipCards() {\n    this.firstCard.flipped = false;\n    this.secondCard.flipped = false;\n    this.clearCards();\n  },\n\n  checkGameOver() {\n    return this.cards.filter(card => !card.flipped).length == 0;\n  },\n\n  createCardsFromTechs: function () {\n    this.cards = [];\n    this.techs.forEach(tech => {\n      this.cards.push(this.createPairFromTech(tech));\n    });\n    this.cards = this.cards.flatMap(pair => pair);\n    this.shuffleCards();\n    return this.cards;\n  },\n  createPairFromTech: function (tech) {\n    return [{\n      id: this.createIdWithTech(tech),\n      icon: tech,\n      flipped: false\n    }, {\n      id: this.createIdWithTech(tech),\n      icon: tech,\n      flipped: false\n    }];\n  },\n  createIdWithTech: function (tech) {\n    return tech + parseInt(Math.random() * 1000);\n  },\n  shuffleCards: function (cards) {\n    let currentIndex = this.cards.length;\n    let randomIndex = 0;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]];\n    }\n  }\n};\nexport default game;","map":{"version":3,"sources":["C:/Users/dougl/OneDrive/Documentos/reactJogoMemoria/react-jogo/src/game/game.js"],"names":["game","lockMode","firstCard","secondCard","techs","cards","setCard","id","card","filter","console","log","flipped","checkMatch","icon","clearCards","unflipCards","checkGameOver","length","createCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor"],"mappings":"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","sourcesContent":["let game = {\n\n    lockMode: false,\n    firstCard: null,\n    secondCard: null,\n\n    techs: ['bootstrap',\n        'css',\n        'electron',\n        'firebase',\n        'html',\n        'javascript',\n        'jquery',\n        'mongo',\n        'node',\n        'react'],\n\n    cards: null,\n\n    setCard: function (id) {\n\n        let card = this.cards.filter(card => card.id === id)[0];\n        console.log(card);\n        if (card.flipped || this.lockMode) {\n            return false;\n        }\n\n        if (!this.firstCard) {\n            this.firstCard = card;\n            this.firstCard.flipped = true;\n            return true;\n        } else {\n            this.secondCard = card;\n            this.secondCard.flipped = true;\n            this.lockMode = true;\n            return true;\n        }\n\n    },\n\n    checkMatch: function () {\n        if (!this.firstCard || !this.secondCard) {\n            return false;\n        }\n        return this.firstCard.icon === this.secondCard.icon;\n    },\n\n    clearCards: function () {\n        this.firstCard = null;\n        this.secondCard = null;\n        this.lockMode = false;\n    },\n    unflipCards() {\n        this.firstCard.flipped = false;\n        this.secondCard.flipped = false;\n        this.clearCards();\n    },\n\n    checkGameOver() {\n\n        return this.cards.filter(card => !card.flipped).length == 0;\n    },\n\n\n\n\n\n    createCardsFromTechs: function () {\n\n        this.cards = [];\n\n        this.techs.forEach((tech) => {\n            this.cards.push(this.createPairFromTech(tech));\n        })\n        this.cards = this.cards.flatMap(pair => pair);\n        this.shuffleCards();\n        return this.cards;\n    },\n\n    createPairFromTech: function (tech) {\n\n        return [{\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }, {\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n        }]\n\n    },\n\n    createIdWithTech: function (tech) {\n        return tech + parseInt(Math.random() * 1000);\n    },\n\n    shuffleCards: function (cards) {\n        let currentIndex = this.cards.length;\n        let randomIndex = 0;\n\n        while (currentIndex !== 0) {\n\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]]\n        }\n\n    }\n\n\n\n}\n\nexport default game"]},"metadata":{},"sourceType":"module"}